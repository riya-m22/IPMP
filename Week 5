//Subarray equal to zero
#include <bits/stdc++.h>

using namespace std;

bool Sumzero(vector<int> A, int n){
    unordered_set<int> s;
    int sum=0;
    for(int i=0;i<n;i++){
        sum+=A[i];
        if(sum==0||s.find(sum)
            != s.end())
            return true;
          s.insert(sum);
    }
    return false;
} 

int main()
{
   vector<int> A;
   int n;
   cin>>n;
   for (int i=0;i<n;i++) {
       cin>>A[i];
   } 
   if(Sumzero(A,n))
    cout<<"Sub array exists";
    else
    cout<<"Sub array doesnt exists";
   return 0;
}
//Search in a row wise and column wise sorted matrix
bool searchMatrix(vector<vector<int>>& matrix, int target) {
            if(matrix.empty() || matrix[0].empty())
    {
        return false;
    }

       int n=matrix.size();
        int m=matrix[0].size();
        int start=0, end=n*m-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            int e=matrix[mid/n][mid%n];
         if(target<e)
            end=mid-1;
        else if(target>e)
            start=mid+1;
            else
            return true;
        }
        return false;
    }
//`Print a given matrix spirally
vector<int> spiralOrder(vector<vector<int>>& matrix) {
       int rowst=0, columnst=0;
        vector<int> a;
        int rowen,colen,i,j=0;
        while(rowst<rowen&&columnst<colen){
            for(i=columnst;i<colen;i++)
                a.push_back(matrix[rowst][i]);
            rowst++;
            
                for(i=rowst;i<rowen;i++)
                   a.push_back(matrix[i][colen-1]);
            colen--;
            if (rowst< rowen) {
            for (i = colen- 1; i >= columnst; --i) {
               a.push_back(matrix[rowen - 1][i]);
            }
            rowen--;
        }
             if (columnst < colen) {
            for (i = rowen- 1; i >= rowst; --i) {
               a.push_back(matrix[i][columnst]) ;
            }
            columnst++;
        }
        }
       return a; 
    }
};
// Water overflow
 double waterOverflow(int X, int i, int j) {
       float glass[i*(i+1)/2];
       if(j>i)
       cout<<"not valid" <<endl;
       memset(glass, 0 ,sizeof(glass));
       int index=0;
       glass[index]=X;
       for(int row=1;row<=i;row++)
       {
           for(int col=1;col<=row;col++,index++)
           {    X = glass[index];

                glass[index] = (X >= 1.0f) ? 1.0f : X;
            X = (X >= 1.0f) ? (X - 1) : 0.0f;
            glass[index + row] += X / 2;
            glass[index + row + 1] += X / 2;
           }
           
      }
       return glass[i*(i-1)/2 + j - 1];
     
    }
  // Segregate even and odd numbers
  class Solution {
public:
    vector<int> sortArrayByParity(vector<int>& nums) {
       int n=nums.size();
        vector<int> sorted;
        for(int i=0;i<n;i++){
            if(nums[i]%2==0)
                 sorted.insert(sorted.begin(),nums[i]);
              
            else 
                 sorted.push_back(nums[i]);  
           
            
        }
        return sorted;
    }
 //Sort An array by increasing frequency
 class Solution {
public:
    vector<int> frequencySort(vector<int>& A) {
        unordered_map<int, int> count;
        for (int a: A)
            count[a]++;
        sort(begin(A), end(A), [&](int a, int b) {
            return count[a] == count[b] ? a > b : count[a] < count[b];
        });
        return A;
    }
};
//Sort an array of 0s,1s,2s
class Solution {
    public:
    void sortColors(vector<int>& nums) 
    {
        int tmp = 0, low = 0, mid = 0, high = nums.size() - 1;
    
        while(mid <= high)
        {
            if(nums[mid] == 0)
            {
                tmp = nums[low];
                nums[low] = nums[mid];
                nums[mid] = tmp;
                low++;
                mid++;
            }
            else if(nums[mid] == 1)
            {
                mid++;
            }
            else if(nums[mid] == 2)
            {
                tmp = nums[high];
                nums[high] = nums[mid];
                nums[mid] = tmp;
                high--;
            }
        }
    }
};
};
//Move all zeroes to end of the array
class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int count=0;
        int n=nums.size();
        for(int i=0;i<n;i++)
            if(nums[i]!=0)
                nums[count++]=nums[i];
        while(count<n)
            nums[count++]=0;
        for(int i=0;i<n;i++)
        cout<<nums[i];
        }
};
// Rotate an image
class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int n=matrix.size();
         for(int i=0;i<n;i++)
            for(int j=0;j<i;j++)
                swap(matrix[i][j],matrix[j][i]);
        for(int i=0;i<n;i++)
            reverse(matrix[i].begin(),matrix[i].end());
       
        for(int i=0;i<n;i++)
            for(int j=0;j<i;j++)
                cout<<matrix[i][j];
        
    }
};
// Count the number of set bits
class Solution {
public:
    int hammingWeight(uint32_t n) {
       unsigned int count=0;
        while(n){
            count +=n&1;
            n>>=1;
        }
    return count;}
};
//Rotate bits
 public:
        vector <int> rotate (int n, int d)
        {
          vector<int> a;
          unsigned int l,r;
          l=n<<d|n>>(16-d);
          a.push_back(l);
          r=n>>d|n<<(16-d);
           a.push_back(r);
           return a;//code here.
        }
};
