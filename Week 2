// Stack using queues
queue<int> que;
    MyStack() {

    }

    void push(int x) {
        que.push(x);
        for(int i=0;i<size(que)-1;i++)
        { que.push(que.front());
             que.pop();
        }
    }

    int pop() {
        int x=que.front();
        que.pop();
        return x;

    }

    int top() {
       return que.front(); 
    }

    bool empty() {
        return que.empty();
            }
 //Queue using Stack
 class MyQueue {
public:
    stack<int> in,out;
    MyQueue() {

    }
    // Span stock
    stack<int> s;
    int p;
    for(
    // Min stack using O(1)
    class MinStack {

public:
    vector<int> a,b;
    MinStack() {
      a=b={};
    }

    void push(int val) {
        a.push_back(val);
    if(b.empty()) b.push_back(val);
        else{
            int newMin=min(val,*b.rbegin());
            b.push_back(newMin);
        }
    }
    void pop() {
      a.pop_back();
      b.pop_back();

    }

    int top() {
        return *a.rbegin();

    }

    int getMin() {
        return *b.rbegin();

    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(val);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */

    void push(int x) {
       in.push(x);
    }

    int pop() {
        peek();
        int x;
        x=out.top();
        out.pop();
        return x;
    }


    int peek() {
       if(out.empty()) 
       { while(in.size())
       {
           out.push(in.top());
           in.pop();}}
        return out.top();


    }

    bool empty() {
    return out.empty() && in.empty();    
    }
};
// Sliding Window Maximum
 vector<int> maxSlidingWindow(vector<int>& nums, int k) {
       vector<int> res;
        deque<int> que;
        for(auto i=0;i<nums.size();i++)
        { while(!que.empty() && nums[i]>=nums[que.back()]) que.pop_back();
            que.push_back(i);

            if(i>=k-1) res.push_back(nums[que.front()]);
            if(que.front()<= i-k + 1) que.pop_front();
        }
        return res;
    }
// span Stock
FindingSpans(int A[], int n)
{ stack<int> D;
  int p;
  for(int i=0;i<n;i++){
  while(!isEmpty(D) && A[i]>A[top(D)])
  pop(D);
  if(isEmpty(D))
  P=-1;
  else P=top(D);
  S[i]=i-P;
  push(D,i);
  }
  return S;
  }
  //Next Greatest Element
  #include<bits/stdc++.h>
using namespace std;

void nextGreat(int A[], int n) {
	stack<int> s;
	int nextGreatest, element;
	vector<int> B;
	int i = 0;
	s.push(A[0]);
	for (i = 0; i < n; i++) {
		nextGreatest = A[i];
		if (!s.empty()) {
			element = s.top();
			s.pop();
			while (nextGreatest > element) {
				B[i] = nextGreatest;
				if (s.empty())
					break;
				element = s.top();
				s.pop();
			}
			if (element > nextGreatest)
				s.push(element);
		}
		s.push(nextGreatest);
	}
	while (!s.empty())
	{
		element = s.top();
		s.pop();
		nextGreatest = -1;
		B[i] = nextGreatest;
	}
	for (int j = 0; j < n; j++)
		cout << B[j];

}


int main()
{
	int A[10];
	int n;
	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> A[i];
	nextGreat(A, n);
}
//Largest area of histogram
int largestRectangleArea(vector<int>& heights) {
        stack<int> s;
        int n=s.size(),ans=0,i=0;;
         heights.push_back(0);
        while(i<n) {
            while(!(s.empty())&&heights[s.top()]>heights[i]){
                int t=s.top();
                int h=heights[t];
                s.pop(); 
                if(s.empty())
                    ans=max(ans,h*i);
                else
                {
                    int len =i-s.top()-1;
                   ans=max(ans,h*len);
            }
            }
              s.push(i);  
            i++ ;
            }
        return ans;
                
        }

};
