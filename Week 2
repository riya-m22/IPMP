// Stack using queues
queue<int> que;
    MyStack() {

    }

    void push(int x) {
        que.push(x);
        for(int i=0;i<size(que)-1;i++)
        { que.push(que.front());
             que.pop();
        }
    }

    int pop() {
        int x=que.front();
        que.pop();
        return x;

    }

    int top() {
       return que.front(); 
    }

    bool empty() {
        return que.empty();
            }
 //Queue using Stack
 class MyQueue {
public:
    stack<int> in,out;
    MyQueue() {

    }
    // Min stack using O(1)
    class MinStack {

public:
    vector<int> a,b;
    MinStack() {
      a=b={};
    }

    void push(int val) {
        a.push_back(val);
    if(b.empty()) b.push_back(val);
        else{
            int newMin=min(val,*b.rbegin());
            b.push_back(newMin);
        }
    }
    void pop() {
      a.pop_back();
      b.pop_back();

    }

    int top() {
        return *a.rbegin();

    }

    int getMin() {
        return *b.rbegin();

    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(val);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */

    void push(int x) {
       in.push(x);
    }

    int pop() {
        peek();
        int x;
        x=out.top();
        out.pop();
        return x;
    }


    int peek() {
       if(out.empty()) 
       { while(in.size())
       {
           out.push(in.top());
           in.pop();}}
        return out.top();


    }

    bool empty() {
    return out.empty() && in.empty();    
    }
};
// Sliding Window Maximum
 vector<int> maxSlidingWindow(vector<int>& nums, int k) {
       vector<int> res;
        deque<int> que;
        for(auto i=0;i<nums.size();i++)
        { while(!que.empty() && nums[i]>=nums[que.back()]) que.pop_back();
            que.push_back(i);

            if(i>=k-1) res.push_back(nums[que.front()]);
            if(que.front()<= i-k + 1) que.pop_front();
        }
        return res;
    }
